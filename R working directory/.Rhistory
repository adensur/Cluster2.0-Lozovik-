install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
JAVA_HOME
install.packages("RMySQL")
install.packages("RMySQL",type="source")
type in R: install.packages("RMySQL", type="source")
install.packages("RMySQL", type="source")
library(RMySQL)
install.packages("C:\Program Files\R\R-3.1.1\RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
install.packages("C:/Program Files/R/R-3.1.1/RMySQL_0.9-3.tar.gz", repos = NULL, type = "source")
library(RMySQL)
descent(1,print=TRUE)
gradient.descent<-function(N,r,alfa=1,K=10,print=FALSE){
if(missing(r)){
r<-init(N)
print("missing r. Reinitializing randoms")
}
else{
N<-ncol(r)
}
Break<-FALSE
for(i in 1:K){
string<-paste(c("i=",i,"of 100000", " U=",U(r)),collapse="")
if(print){print(string)}
deltaU<- 1    ##difference between current U and calculated on next iteration U
t<-1          ##counter to exclude the possibility of infinite loop
while(deltaU>=0 & !Break){
r2<-delta(r,alfa=alfa)
deltaU<-U(r2)-U(r)
##print(c("delta=U",deltaU))
if(deltaU>0){
alfa<-alfa/10
##print(c("alfa=",alfa))
}
t<=t+1
if(t>=100000){Break<-TRUE}##to avoid infinite loop
break
}
if(Break){
print("Too many iterations. exiting loop")
break
}
r<-r2
}
print(U(r))
r
}
grad.U<-function(r,var,k){##takes numeric vectors x,y,z, and number of particles N
##var is the variable, for which the gradient is calculated.var=1 - x, var=2 - y, var=3 - z
##k is the index of the variable in vector. (i.e., number of particle)
##so for var="x" and k=3 the gradient U by x[3] will be calculated.
N<-ncol(r)      ##number of particles
if(k>N){print("grad.U: invalid k. k is more then number of particles")}
sum<-0
for(i in 1:N){
if(i!=k){
sum<-sum+6*(r[var,k]-r[var,i])*(rki(r,k,i)^(-8))
}
}
sum<-2*r[var,k]-sum
sum
}
rki<-function(r,k,i){##calculates the distance between particle i and particle k;
##x, y, z (vectors) specify coordinates of all particles
rki<-NULL
if(k==i){print("rki error! k=i!")}
else{
rki<-((r[1,k]-r[1,i])^2+(r[2,k]-r[2,i])^2+(r[3,k]-r[3,i])^2)^0.5
}
names(rki)<-"Distance"
rki
}
U<-function(r){##returns a value of the potential energy of the system
N<-ncol(r)
U<-0
for(i in 1:N){
sum<-0
if(i<N){
for(k in (i+1):N){
sum<-sum+rki(r,k,i)^(-6)
}
}
U<-U+sum+r[1,i]^2+r[2,i]^2+r[3,i]^2
}
names(U)<-"Potential energy"
U
}
init<-function(N){##initializes matrix 3 times N with correct rownames and random values
r<-rbind(rnorm(N),rnorm(N),rnorm(N))
rownames(r)<-(c("x","y","z"))
r
}
delta<-function(r,alfa=1){##calculate vector of difference (one gradient descent iteration)
r2<-r
N<-ncol(r)
for(k in 1:N){
for(var in 1:3){
r2[var,k]<-r[var,k]-alfa*grad.U(r,var,k)
}
}
r2
}
reinit<-function(N){##loads r from file; returns it
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
r
}
myplot<-function(r,rad){##rad is a vector of shell radiuses. Particles within radk, rad(k+1) will be drown in same color
library(rgl)
add<-FALSE
l<-length(rad)
plot3d(r[1,],r[2,],r[3,])##äîïèñàòü ôóíêöèþ, ÷òîáû ðèñîâàëà ÷àñòèöû ðàçíûõ îáîëî÷åê ðàçíûìè öâåòàìè
}##extends possibility of plot3d to plot a matrix 3xN
descent<-function(N=1:100,print=FALSE){##calcs descent over vector of N's and write each to a file
for(i in N){
r<-gradient.descent(i,alfa=1,K=100000, print=print)
file<-paste(c("data_init/",i,".csv"),collapse="")
write.csv(r,file=file,row.names=FALSE)
print(paste(c("printed file",file)),collapse="")
}
string<-paste(c("files for N=",paste(N,collapse=", ")," printed succesfully"), collapse="")
print(string)
}
rad<-function(r){##calculates the distance from particle k to the beginning of the coordinates
N<-ncol(r)
rad<-rep(0,times=N)
for(k in 1:N){
rad[k]<-r[1,k]^2+r[2,k]^2+r[3,k]^2
}
rad
}
descent(1,print=TRUE)
?write.table
default.stringsAsFactors()
Sys.getlocale()
Librarz)xlsx
library(xlsx)
library(ggplot2)
17-20
17/20
27/48
print(i)
for(i in 1:10000000){
i
}
for(i in 1:10000000){
print(i)
}
i
library(datasets)
?ToothGrowth
data=ToothGrowth
head(data)
dim(data)
data
View(data)
library(ggplot2)
?qplot
qplot(len,col=suo+dose)
qplot(len,col=sup+dose)
qplot(len,col=sup)
qplot(len,col=sup,data=data)
?qplot
qplot(x=len,col=supp,data=data)
qplot(x=len,y=dose,col=supp,data=data)
qplot(x=len,y=dose,facet=supp,data=data)
qplot(x=len,y=dose,facets=supp,data=data)
?qplot
qplot(x=len,y=dose,facets=.~supp,data=data)
qplot(x=len,y=dose,facets=.~supp,data=data,geom="points")
qplot(x=len,y=dose,facets=.~supp,data=data,geom="point")
qplot(x=len,y=dose,facets=.~supp,data=data,geom=c("point","average"))
qplot(x=len,y=dose,facets=.~supp,data=data,geom=c("point","density"))
qplot(x=len,y=dose,facets=.~supp,data=data,geom=c("point"))
qplot(x=len,y=dose,facets=.~supp,data=data,geom=c("point","density"))
qplot(x=len,y=dose,col=supp,data=data,geom=c("point","density"))
qplot(x=len,y=dose,col=supp,data=data,geom=c("point"))
?gplot
?ggplot
qplot(y=len,x=dose,col=supp,data=data,geom=c("point","density"))
qplot(y=len,x=dose,col=supp,data=data,geom=c("point","smoth"))
qplot(y=len,x=dose,col=supp,data=data,geom=c("point","smooth"))
qplot(x=len,y=dose,col=supp,data=data,geom=c("point","smooth"))
qplot(x=len,y=dose,col=supp,data=data,geom=c("point","density"))
qplot(x=len,y=dose,col=supp,data=data,geom=c("point","smooth"))
qplot(x=len,y=dose,col=supp,data=data)
qplot(x=len,y=dose,facets=.~supp,data=data)
qplot(x=len,y=dose,facets=.~supp,data=data,geom=c("point","smooth"))
qplot(x=len,y=dose,col=supp,data=data,geom=c("point","smooth"))
qplot(y=len,x=dose,col=supp,data=data,geom=c("point","smooth"))
```{r,warning=F}
?ToothGrowth
qplot(x=len,col=dose,data=data,geom=c("point","smooth"))
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
?ttest
?t.test
group1=data[supp=="OJ"]
group1=data[data$supp=="OJ"]
group1=data[data$supp=="OJ",]
length(group1)
group1
dim(group1)
group1=data[data$supp=="OJ" && data$dose=1.0,1]
group1=data[data$supp=="OJ" && data$dose==1,1]
length(group1)
dim(group1)
group1=data[data$supp=="OJ" && data$dose=="1.0",1]
group1
summary(data)
group1=data[data$supp="OJ",1]
group1=data[data$supp=="OJ",1]
group1
group1=data[data$dose==1,1]
group1
length(group1)
group1=data[data$dose==1 && data$supp="OJ",1]
group1=data[data$dose==1 && data$supp=="OJ",1]
group1
data$dose==1
data$supp=="OJ"
data$supp=="OJ" && data$dose==1
data$supp=="OJ" & data$dose==1
group1=data[data$dose==1 & data$supp=="OJ",1]
gruop1
group1
group2=data[data$dose==0.5 & data$supp=="OJ",1]
groop2
group2
length(group2)
x=data[data$dose==1 & data$supp=="OJ",1]
y=data[data$dose==0.5 & data$supp=="OJ",1]
t.test(x=x,y=y)
qplot(y=len,x=dose,col=supp,data=data,geom=c("point","smooth"))
x=data[data$dose==2 & data$supp=="OJ",1]
y=data[data$dose==1 & data$supp=="OJ",1]
t.test(x=x,y=y)
x=data[data$dose==1 & data$supp=="VC",1]
y=data[data$dose==0.5 & data$supp=="VC",1]
t.test(x=x,y=y)
x=data[data$dose==2 & data$supp=="VC",1]
y=data[data$dose==1 & data$supp=="VC",1]
t.test(x=x,y=y)
t.test(x=x,y=y,alternative="g")
x=data[data$dose==2 & data$supp=="VC",1]
y=data[data$dose==1 & data$supp=="VC",1]
t.test(x=x,y=y,alternative="g")
t.test(x=x,y=y)
t.test(x=x,y=y,alternative="g")
x=data[data$dose==1 & data$supp=="OJ",1]
y=data[data$dose==0.5 & data$supp=="OJ",1]
var(x)
var(y)
x=data[data$dose==2 & data$supp=="OJ",1]
y=data[data$dose==1 & data$supp=="OJ",1]
var(x)
var(y)
for(i in 0:5){print(var(group[(i*10):(i*10+9),1]))}
for(i in 0:5){print(var(data[(i*10):(i*10+9),1]))}
x=data[data$dose==2 & data$supp=="OJ",1]
y=data[data$dose==1 & data$supp=="OJ",1]
var(x)
var(y)
x=data[data$dose==1 & data$supp=="OJ",1]
y=data[data$dose==0.5 & data$supp=="OJ",1]
var(x)
var(y)
x=data[data$dose==1 & data$supp=="VC",1]
y=data[data$dose==0.5 & data$supp=="VC",1]
var(x)
var(y)
x=data[data$dose==2 & data$supp=="VC",1]
y=data[data$dose==1 & data$supp=="VC",1]
var(x)
var(y)
x=data[data$dose==1 & data$supp=="VC",1]
y=data[data$dose==0.5 & data$supp=="VC",1]
t.test(x=x,y=y,paired=T)
x=data[data$dose==2 & data$supp=="OJ",1]
y=data[data$dose==1 & data$supp=="OJ",1]
var(x)
var(y)
?t.test
v1=c("140","138","150","148","135")
v2=c("132","135","151","146","130")
data=cbind(v1,v2)
data
v1=c(140,138,150,148,135)
v2=c(132,135,151,146,130)
data=cbind(v1,v2)
data
t.test(x=v1,y=v2,alternative="two.sided",paired=TRUE)
qplot(v1,v2)
library(ggplot2)
qplot(v1,v2)
mean(v1)
mean(v2)
sd(v1)
sd(v2)
?t.tetst
?t.tst
?t.test
?qt
p=c(0.025,0.975)
p
qt(p,df=8)
q=qt(p,df=8)
q
mean=1100
sd=30
mean+c(-1,1)*q*sd
q*sd
c(-1,1)
c(-1,1)*q*sd
q*sd
mean+q*sd
v=c(1,1,1,0)
v
?t.test
t.test(x=v,alternative="less")
mean(v)
?qbinom
pbinom(3,size=4,prob=0.5)
pbinom(4,size=4,prob=0.5)
pbinom(3,size=4,prob=0.5)
pbinom(2,size=4,prob=0.5)
pbinom(2,size=4,prob=0.5,lower.tail=FALSE)
0.5^4
1-.Last.value
p=0.01
p
pbinom(10,size=1787,prob=p)
?qt
?t.test
mean(c(mean1,mean2))
mu1=-3
sd1=1.5
mu2=+1
sd2=1.8
mean(c(,u1,mu2))
mean(c(u1,mu2))
mean(c(mu1,mu2))
?ppois()
520*30
520*30
ppois(10,17.87)
mu1=-3
sd1=1.5
mu2=+1
sd2=1.8
Sp=sqrt((sd1^2+sd2^2)/2)
Sp
z=(mu2-mu1)*sqrt(n)/(Sp*sqrt(2))
n=9
z=(mu2-mu1)*sqrt(n)/(Sp*sqrt(2))
z
pnorm(z)
?power.t.test
power.t.test(n=100,delta=0.01,sd=0.04,type="one.sample",alternative="one.sided")
power.t.test(power=0.9,delta=0.01,sd=0.04,type="one.sample",alternative="one.sided")
mean=1100
sd=30
n=9
mean+c(-1,1)*qnorm(.975)*sd/sqrt(n)
mean=1100
sd=30
n=9
mean+c(-1,1)*qnorm(.975)*sd/sqrt(n)
mean=1100
sd=30
n=9
mean+c(-1,1)*qnorm(0.975)*sd/sqrt(n)
sd
mean
sqrt(n)
mean=1100
sd=30
n=9
mean+c(-1,1)*qt(0.975)*sd/sqrt(n)
?qt
mean=1100
sd=30
n=9
mean+c(-1,1)*qt(0.975,df=8)*sd/sqrt(n)
dir()
setwd("C:/Repos/Cluster2.0-Lozovik-/R working directory")
source('C:/Repos/Cluster2.0-Lozovik-/R working directory/cluster2.1.R', echo=TRUE)
##mean squared radial deviation
N=27         #number of particles
velocity=function(aggr){   #function calculates velocity distribution over all the array.
M=dim(aggr)[3]
N=dim(aggr)[2]
vel=NULL
for(m in 1:M){
vel=c(vel,rad(aggr[4:6,,m]))
}
vel
}
aggr.rad=function(aggr){
M=dim(aggr)[3]
radial=NULL
for(m in 1:M){
radial=cbind(radial,rad(aggr[,,m]))
}
radial
}
t=seq(0.001,0.2,by=0.001)
K1=500
K2=15
dt=0.05
#
for(i in 1:length(t)){
r=reinit(27) #initial equilibrium state, T=0
r=temp(r, temperature = t[i])
arr=molecular2(r,K1,K2,dt=dt)
rad1=aggr.rad(arr)
sd1=NULL
for(n in 1:N){
sd1=c(sd1,sd(rad1[n,]))
}
#
sd10=mean(sd1)
vector=c(t[i],Temp,mean(sd1))
data=rbind(data,vector)
#print()
}
warnings()
dim(data)
head(data)
d=mtcars
d
library(UsingR)
install.packages("UsingR")
library(UsingR)
d=father.son
head(D)
head(d)
lm(fheight~sheigh, data=d)
?lm
lm1=lm(fheight~sheight, data=d)
lm1
plot(d$fheight,d$sheight)
abline(lm1)
source('~/.active-rstudio-document', echo=TRUE)
w <- c(2, 1, 3, 1)
mu=sum(w*x)/sum(w)
mu
?lm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
length(x)
length(y)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
beta=sum(x*y)/sum(x^2)
beta
head(mtcars)
lm1=lm(mpg~wt,data=mtcars)
lm1
0.4*1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
norm=(x-mean(x))/sd(x)
norm
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm2=lm(y~x)
lm2
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(X)
mean(x)
