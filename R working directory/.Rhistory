grad<-rbind(null,null,null)##the initial value for vector grad is all zeroes; 3*N matrix
for(k in 1:N){
for(var in 1:3){
grad[var,k]<-grad.U(r,var,k)
}
}
grad
}
rki<-function(r,k,i){##calculates the distance between particle i and particle k;
##x, y, z (vectors) specify coordinates of all particles
rki<-NULL
if(k==i){print("rki error! k=i!")}
else{
rki<-((r[1,k]-r[1,i])^2+(r[2,k]-r[2,i])^2+(r[3,k]-r[3,i])^2)^0.5
}
names(rki)<-"Distance"
rki
}
U<-function(r){##returns a value of the potential energy of the system
N<-ncol(r)
U<-0
for(i in 1:N){
sum<-0
if(i<N){
for(k in (i+1):N){
sum<-sum+rki(r,k,i)^(-6)
}
}
U<-U+sum+r[1,i]^2+r[2,i]^2+r[3,i]^2
}
names(U)<-"Potential energy"
U
}
init<-function(N){##initializes matrix 3 times N with correct rownames and random values
r<-rbind(rnorm(N),rnorm(N),rnorm(N))
rownames(r)<-(c("x","y","z"))
r
}
delta<-function(r,alfa=1){##calculate vector of difference (one gradient descent iteration)
r2<-r
N<-ncol(r)
for(k in 1:N){
for(var in 1:3){
r2[var,k]<-r[var,k]-alfa*grad.U(r,var,k)
}
}
r2
}
reinit<-function(N){##loads r from file; returns it
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
r
}
myplot<-function(r,...){##rad is a vector of shell radiuses. Particles within radk, rad(k+1) will be drown in same color
library(rgl)
plot3d(r[1,],r[2,],r[3,],...)##дописать функцию, чтобы рисовала частицы разных оболочек разными цветами
}##extends possibility of plot3d to plot a matrix 3xN
descent<-function(N=1:100,print=FALSE,alfa=1){##calcs descent over vector of N's and write each to a file
for(i in N){
r<-gradient.descent(i,alfa=alfa,K=100000, print=print)
file<-paste(c("data_init/",i,".csv"),collapse="")
write.csv(r,file=file,row.names=FALSE)
print(paste(c("printed file",file)),collapse="")
}
string<-paste(c("files for N=",paste(N,collapse=", ")," printed succesfully"), collapse="")
print(string)
}
rad<-function(r){##calculates the distance from particle k to the beginning of the coordinates
N<-ncol(r)
rad<-rep(0,times=N)
for(k in 1:N){
rad[k]<-(r[1,k]^2+r[2,k]^2+r[3,k]^2)^(0.5)
}
rad
}
temp<-function(r,T=0.001){##adds a small, random increments to the coordinates (r) and velocities of the system
N<-ncol(r)
dr<-rbind(rnorm(N,sd=T),rnorm(N,sd=T),rnorm(N,sd=T)) ##for now T is just the standart
##deviation of the new distribution
dv<-rbind(rnorm(N,sd=T),rnorm(N,sd=T),rnorm(N,sd=T))
r<-r+dr
r<-rbind(r,dv)
}
rstep<-function(r, dt=1){##returns a next step of the "leap frog" iteration process
N<-ncol(r)
deltar<-dt*r[4:6,]##this is now the matrix 3*N of small random increments
null<-rep(0,times=N)
null<-rbind(null,null,null)##null is now a matrix 3*N of all zeroes
deltar<-rbind(deltar,null)
rnew<-r+deltar
rnew
}
vstep<-function(r,dt=1){##same as rstep, but for velocities v
N<-ncol(r)
deltav<-dt*vgrad.U(r[1:3,])
null<-rep(0,times=N)
null<-rbind(null,null,null)##null is now a matrix 3*N of all zeroes
deltav<-rbind(null,deltav)
vnew<-r-deltav
vnew
}
array.descent<-function(N=27,M=20,sd=1,alfa=0.5,K=20000,print=FALSE){
##calculates a series of grad. descents to compare local minimums
arr<-array(dim=c(3,27,M))
for(m in 1:M){
r<-rbind(rnorm(N,sd=sd),rnorm(N,sd=sd),rnorm(N,sd=sd))
arr[,,m]<-gradient.descent(N=N,r=r,alfa=alfa,K=K,print=print)
}
arr
}
array.U<-function(arr,M){
##calculates a vector of potential energies from the array of 3*N*M M different r vectors.
vector.U<-NULL
for(m in 1:M){
vector.U<-c(vector.U,U(arr[,,m]))
}
}
myplot2<-function(r,neightbours=5,...){
t<-0
plot3d(r[1,],r[2,],r[3,],...)
library(rgl)
N<-ncol(r)
if(neightbours>N){
neightbours<-N
}
for(i in 1:N){
plotted<-0
lim<-0.1
while(plotted<=neightbours & t<10000){
for(k in i:N){
t<-t+1
if(i!=k){
r2<-r[,c(i,k)]
a<-r[,i]
b<-r[,k]
theta <- acos( sum(a*b) / ( sqrt(sum(a * a)) * sqrt(sum(b * b)) ) )
##this calculates angle between vectors
if(theta<lim){
plotted<-plotted+1
plot3d(r2[1,],r2[2,],r2[3,],type="l",add=TRUE,...)
}
}
}
lim<-lim+0.1
}
}
}
molecular<-function(r,K,dt=0.1,print=FALSE,plot=FALSE){
add=FALSE
for (i in 1:K){
if(print)print(U(r))
if(plot)myplot(r,add=add)
add<-TRUE
r<-rstep(r,dt)
r<-vstep(r,dt)
}
if(print)print(U(r))
r
}
##r<-gradient.descent(N=27,r=r,alfa=0.5,K=5000, print = TRUE)
##r<-reinit(N)
##ra<-rad(r)
##plot(sort(ra))
##myplot(r)
##U(r)
dir()
arr
arr<-read.csv("/data_init/arr27.csv")
arr<-read.csv("/data_init/arr 27.csv")
dir(data_init)
dir("data_init")
arr<-read.csv("data_init/arr27.csv")
arr
class(arr)
arr<-as.array(read.csv("data_init/arr27.csv"))
arr
dim(arr)
?as.array
arr<-as.array(read.csv("data_init/arr27.csv"),dim=c(3,27,20))
load("C:/Cluster2.0-Lozovik-/R working directory/.RData")
arr
dim(arr)
3*27*20
arr
ass.array(arr)
as.array(arr)
as.array(arr, dim=c(3,27,20))
dim=c(3,27,20)
as.array(as.vector(arr), dim=c(3,27,20))
dim(arr)
?write.csv
3*540
arr2<-1:1620
arr2<-as.array(arr2,dim=c(3,27,20))
arr2
dim(arr2)
arr3<-as.array(arr2,dim=c(3,27,20))
arr3
?array
arr3<-array(arr,dim=c(3,27,20))
arr3
dim(arr3)
arr3<-array(arr2,dim=c(3,27,20))
arr3
write.csv(arr3,file="asfa.csv")
arr4<-read.csv(file="asfa.csv")
arr4
dimm(arr4)
dim(arr4)
dim(arr3)
dim(arr)
write.csv(arr3,file="asfa.csv",row.names=FALSE)
arr4<-read.csv(file="asfa.csv")
dim(arr4)
arr4
v<-as.vector(arr4)
arr5<-array(v,dim=c(3,27,20))
dim(arr5)
arr5
arr4
v
dim(v)
class(v)
dim(arr4)
?as.vector
arr4
dim(arr4)
?array
dim(arr4)[2]
540/3
540/13
540 %/% 13
13*41
reinit<-function(N, type="N"){##loads r from file; returns it
if(type=="N"){
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
}
else if(type=="arr"){
file<-paste(c("data_init/arr",))
arr2<-read.csv(file=file) ##a data frame 3 by (N*M)
L<-dim(arr2)[2]
M<-L/N
arr<-array(dim=c(3,N,M))
for(m in 1:M){
for(n in 1:N){
arr[,L%/%N,L%%N]<-arr2[,n,m]
}
}
}
r
}
arr<-reinit(27,type="arr")
reinit<-function(N, type="N"){##loads r from file; returns it
if(type=="N"){
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
}
else if(type=="arr"){
file<-paste(c("data_init/arr",N,".csv"),collapse="")
arr2<-read.csv(file=file) ##a data frame 3 by (N*M)
L<-dim(arr2)[2]
M<-L/N
arr<-array(dim=c(3,N,M))
for(m in 1:M){
for(n in 1:N){
arr[,L%/%N,L%%N]<-arr2[,n,m]
}
}
}
r
}
arr<-reinit(27,type="arr")
dim(arr)
r<-reinit(27)
r
dim(r)
debug(reinit)
arr<-reinit(27,type="arr")
type
file
dim(arr2)
L
M
N
dim(arr)
reinit<-function(N, type="N"){##loads r from file; returns it
if(type=="N"){
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
r
}
else if(type=="arr"){
file<-paste(c("data_init/arr",N,".csv"),collapse="")
arr2<-read.csv(file=file) ##a data frame 3 by (N*M)
L<-dim(arr2)[2]
M<-L/N
arr<-array(dim=c(3,N,M))
for(m in 1:M){
for(n in 1:N){
arr[,L%/%N,L%%N]<-arr2[,n,m]
}
}
arr
}
}
arr<-reinit(27,type="arr")
dim(arr)
r<-arr[,,3]
r
arr
debug(reinit)
arr<-reinit(27,type="arr")
arr2
dim(arr2)
str(arr2)
dim(arr2)
N
L
M
m
L%/%N
reinit<-function(N, type="N"){##loads r from file; returns it
if(type=="N"){
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
r
}
else if(type=="arr"){
file<-paste(c("data_init/arr",N,".csv"),collapse="")
arr2<-read.csv(file=file) ##a data frame 3 by (N*M)
L<-dim(arr2)[2]
M<-L/N
arr<-array(dim=c(3,N,M))
for(m in 1:M){
for(n in 1:N){
arr[,L%/%n,L%%n]<-arr2[,n,m]
}
}
arr
}
}
arr<-reinit(27,type="arr")
debug(reinit)
arr<-reinit(27,type="arr")
reinit<-function(N, type="N"){##loads r from file; returns it
if(type=="N"){
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
r
}
else if(type=="arr"){
file<-paste(c("data_init/arr",N,".csv"),collapse="")
arr2<-read.csv(file=file) ##a data frame 3 by (N*M)
L<-dim(arr2)[2]
M<-L/N
arr<-array(dim=c(3,N,M))
for(m in 1:M){
for(n in 1:N){
arr[,L%/%n,L%%m]<-arr2[,n,m]
}
}
arr
}
}
arr<-reinit(27,type="arr")
array.descent<-function(N=27,M=20,sd=1,alfa=0.5,K=20000,print=FALSE){
##calculates a series of grad. descents to compare local minimums
arr<-array(dim=c(3,27,M))
for(m in 1:M){
r<-rbind(rnorm(N,sd=sd),rnorm(N,sd=sd),rnorm(N,sd=sd))
arr[,,m]<-gradient.descent(N=N,r=r,alfa=alfa,K=K,print=print)
}
file<-paste(c("data_init/arr",N,".csv"),collapse="")
write.csv(arr,file=file,row.names=FALSE)
arr
}
reinit<-function(N, type="N"){##loads r from file; returns it
if(type=="N"){
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
r
}
else if(type=="arr"){
file<-paste(c("data_init/arr",N,".csv"),collapse="")
arr2<-read.csv(file=file) ##a data frame 3 by (N*M)
L<-dim(arr2)[2]
M<-L/N
arr<-array(dim=c(3,N,M))
for(m in 1:M){
for(n in 1:N){
arr[,n,m]<-arr2[,L%/%n+L%%m]
}
}
arr
}
}
arr<-reinit(27,type="arr")
reinit<-function(N, type="N"){##loads r from file; returns it
if(type=="N"){
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
r
}
else if(type=="arr"){
file<-paste(c("data_init/arr",N,".csv"),collapse="")
arr2<-read.csv(file=file) ##a data frame 3 by (N*M)
L<-dim(arr2)[2]
M<-L/N
arr<-array(dim=c(3,N,M))
for(m in 1:M){
for(n in 1:N){
arr[,n,m]<-arr2[,(L%/%n+L%%m)]
}
}
arr
}
}
arr<-reinit(27,type="arr")
debuf(reinit)
debug(reinit)
arr<-reinit(27,type="arr")
m
print(n)
m
L%/%n
reinit<-function(N, type="N"){##loads r from file; returns it
if(type=="N"){
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
r
}
else if(type=="arr"){
file<-paste(c("data_init/arr",N,".csv"),collapse="")
arr2<-read.csv(file=file) ##a data frame 3 by (N*M)
L<-dim(arr2)[2]
M<-L/N
arr<-array(dim=c(3,N,M))
for(m in 1:M){
for(n in 1:N){
arr[,n,m]<-arr2[,(N*n+m)]
}
}
arr
}
}
arr<-reinit(27,type="arr")
reinit<-function(N, type="N"){##loads r from file; returns it
if(type=="N"){
file<-paste(c("data_init/",N,".csv"),collapse="")
r<-as.matrix(read.csv(file))
r
}
else if(type=="arr"){
file<-paste(c("data_init/arr",N,".csv"),collapse="")
arr2<-read.csv(file=file) ##a data frame 3 by (N*M)
L<-dim(arr2)[2]
M<-L/N
arr<-array(dim=c(3,N,M))
for(m in 1:M){
for(n in 1:N){
arr[,n,m]<-arr2[,(N*(m-1)+n)]
}
}
arr
}
}
arr<-reinit(27,type="arr")
dim(arr)
arr
r<-arr[,,3]
r
U(r)
vU<-array.U(arr,20)
vU
array.U<-function(arr,M){
##calculates a vector of potential energies from the array of 3*N*M M different r vectors.
vector.U<-NULL
for(m in 1:M){
vector.U<-c(vector.U,U(arr[,,m]))
}
vector.U
}
vU
vU<-array.U(arr,20)
vU
r<-reinit(27)
r2<-arr[,,4]
U(r2)
myplot(r)
r2<-gradient.descent(27,r=r2,alfa=0.5,K=1000,print=TRUE)
U(r2)
vU
plot(sort(rad(r)))
plot(sort(rad(r2)))
plot(sort(rad(r)))
plot(sort(rad(r2)))
plot(sort(rad(r)))
r3<-arr[,,7]
U(r3)
plot(sort(rad(r3)))
r3<-gradient.descent(27,r=r3,alfa=0.5,K=1000,print=TRUE)
r3<-gradient.descent(27,r=r3,alfa=0.5,K=10000,print=TRUE)
vU
arr[,,7]<-r3
vU<-vector.U(arr)
vU<-array.U(r)
vU<-array.U(r3,20)
vU<-array.U(arr,20)
vU
hist(rad(r))
save.image("C:/Cluster2.0-Lozovik-/R working directory/.RData")
